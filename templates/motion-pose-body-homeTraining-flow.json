[
  {
      "id": "b1d0c8903999be6c",
      "type": "tab",
      "label": "Body-Home Training Flow (Smart Camera)",
      "disabled": true,
      "info": ""
  },
  {
      "id": "e75852e4a5f56eac",
      "type": "http in",
      "z": "b1d0c8903999be6c",
      "name": "",
      "url": "/body/webcam",
      "method": "get",
      "upload": false,
      "swaggerDoc": "",
      "x": 450,
      "y": 240,
      "wires": [
          [
              "f106f6a6d6673869",
              "6af0429c9eab7380"
          ]
      ]
  },
  {
      "id": "eb99463e9b52ac30",
      "type": "http response",
      "z": "b1d0c8903999be6c",
      "name": "",
      "statusCode": "200",
      "headers": {},
      "x": 1100,
      "y": 300,
      "wires": []
  },
  {
      "id": "f106f6a6d6673869",
      "type": "change",
      "z": "b1d0c8903999be6c",
      "name": "Initialize",
      "rules": [
          {
              "t": "delete",
              "p": "payload",
              "pt": "flow"
          },
          {
              "t": "delete",
              "p": "registeredPoses",
              "pt": "flow"
          }
      ],
      "action": "",
      "property": "",
      "from": "",
      "to": "",
      "reg": false,
      "x": 750,
      "y": 240,
      "wires": [
          [
              "5468e6d26f423587"
          ]
      ]
  },
  {
      "id": "f2415a1593899931",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "Array Setting",
      "func": "flow.set(\"registeredPoses\", msg.payload || []);\nflow.set(\"goal\",10)\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.payload = [];",
      "finalize": "",
      "libs": [],
      "x": 1260,
      "y": 240,
      "wires": [
          [
              "6978fa5b0c060a84"
          ]
      ]
  },
  {
      "id": "6978fa5b0c060a84",
      "type": "debug",
      "z": "b1d0c8903999be6c",
      "name": "",
      "active": false,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 1450,
      "y": 240,
      "wires": []
  },
  {
      "id": "5468e6d26f423587",
      "type": "mongodb in",
      "z": "b1d0c8903999be6c",
      "mongodb": "1358ea9c6c074371",
      "name": "Pose Load",
      "collection": "bodytraining",
      "operation": "find",
      "x": 920,
      "y": 240,
      "wires": [
          [
              "85486447c153d72e"
          ]
      ]
  },
  {
      "id": "85486447c153d72e",
      "type": "json",
      "z": "b1d0c8903999be6c",
      "name": "",
      "property": "payload",
      "action": "obj",
      "pretty": false,
      "x": 1080,
      "y": 240,
      "wires": [
          [
              "f2415a1593899931"
          ]
      ]
  },
  {
      "id": "c47e65d45b674df3",
      "type": "bixby in",
      "z": "b1d0c8903999be6c",
      "method": "get",
      "url": "/count",
      "urlDate": 1633354460953,
      "isUniqueUrl": false,
      "bixbyin": {},
      "x": 340,
      "y": 560,
      "wires": [
          [
              "5a354babcc74f511"
          ]
      ]
  },
  {
      "id": "07fe9ee0fb329708",
      "type": "bixby in",
      "z": "b1d0c8903999be6c",
      "method": "get",
      "url": "/start",
      "urlDate": 1633347669907,
      "isUniqueUrl": false,
      "bixbyin": {},
      "x": 340,
      "y": 500,
      "wires": [
          [
              "fe0a3e85d039327d"
          ]
      ]
  },
  {
      "id": "ac4f9bd7b0537646",
      "type": "bixby in",
      "z": "b1d0c8903999be6c",
      "method": "get",
      "url": "/end",
      "urlDate": 1633358414395,
      "isUniqueUrl": false,
      "bixbyin": {},
      "x": 340,
      "y": 620,
      "wires": [
          [
              "17c5fa5760259077"
          ]
      ]
  },
  {
      "id": "fe0a3e85d039327d",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "",
      "func": "flow.set(\"isRoutineStart\", true)\nflow.set(\"counting\",29858)\nflow.set(\"goal\",30000)\nflow.set(\"previousPose\",0)\nmsg.results.result = \"스쿼트를 시작합니다.\"\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 540,
      "y": 500,
      "wires": [
          [
              "dc56fea75de184df"
          ]
      ]
  },
  {
      "id": "5a354babcc74f511",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "",
      "func": "let counting = flow.get(\"counting\")\nlet goal = flow.get(\"goal\")\nlet temp = goal-counting\nmsg.results.result = '총 '+ counting + '개의 스쿼트를 했습니다. 목표까지 '+ temp + '개 남았습니다.'\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 540,
      "y": 560,
      "wires": [
          [
              "20ad1f50da85daaa"
          ]
      ]
  },
  {
      "id": "17c5fa5760259077",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "",
      "func": "let counting = flow.get(\"counting\")\nlet goal = flow.get(\"goal\")\nlet temp = goal-counting\n\n// if(goal == undefined)    goal == 0;\n\nmsg.results.result = '운동을 종료합니다. 목표 횟수 ' + goal + '개 중, ' + counting+ '개를 수행했습니다.'\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 540,
      "y": 620,
      "wires": [
          [
              "6bc31c613b456a31"
          ]
      ]
  },
  {
      "id": "6af0429c9eab7380",
      "type": "pose-detection-webcam",
      "z": "b1d0c8903999be6c",
      "name": "",
      "serverUrl": "team1.ssafy.dev.devground.io",
      "monitorPort": 1881,
      "dataSocketUrl": "ws://team1.ssafy.dev.devground.io:1880/ws/data",
      "x": 870,
      "y": 300,
      "wires": [
          [
              "eb99463e9b52ac30"
          ]
      ]
  },
  {
      "id": "d82a1ccf8366ee7d",
      "type": "http in",
      "z": "b1d0c8903999be6c",
      "name": "",
      "url": "/body/iotcam",
      "method": "get",
      "upload": false,
      "swaggerDoc": "",
      "x": 440,
      "y": 360,
      "wires": [
          [
              "eebb2821cb198b06",
              "56dfdbdf69e3c9ab"
          ]
      ]
  },
  {
      "id": "78fdc1e6654b4eb1",
      "type": "pose-detection-iotcam",
      "z": "b1d0c8903999be6c",
      "name": "",
      "serverUrl": "team1.ssafy.dev.devground.io",
      "monitorPort": 1882,
      "rtspPort": 1886,
      "dataSocketUrl": "ws://team1.ssafy.dev.devground.io:1880/ws/data",
      "x": 860,
      "y": 360,
      "wires": [
          [
              "36c4c3c6a3047c74"
          ]
      ]
  },
  {
      "id": "36c4c3c6a3047c74",
      "type": "http response",
      "z": "b1d0c8903999be6c",
      "name": "",
      "statusCode": "200",
      "headers": {},
      "x": 1100,
      "y": 360,
      "wires": []
  },
  {
      "id": "97d4cff1f4921892",
      "type": "installed-device",
      "z": "b1d0c8903999be6c",
      "name": "",
      "alias": "token:20e09e17",
      "device": "",
      "devices": [
          "4d192f0d-596d-4654-a5fa-45cae8a95250",
          "5f9a4811-6ec1-4e4f-801b-b45c2aa87cda",
          "fc05f376-216c-36a0-c583-4c3e5d211fcb",
          "d3009ee6-bddf-5458-9160-1e0382da3184",
          "21242d0b-c555-144c-27f6-b00bef816007",
          "83024186-5f6d-8cc5-a54f-9eee02045142",
          "645ed6c4-156f-8ce1-bbd2-a2decf6be35b",
          "702ce8be-5a1f-3bfc-af25-c5648337aa08",
          "be821182-7452-40f7-84c8-a101aafbcadd",
          "77cbf87b-2b7b-b7bf-d602-4d4597941d2d",
          "1d88fbdb-d105-43bd-9b63-be4037b3c640",
          "a139fbe2-cc14-421e-8e49-b933a16ed120",
          "b5d536c2-4341-09e2-e138-836a9a9332c6",
          "c0a6fd54-bbae-4f75-a7d8-5dbea7785c52",
          "373209a7-6a6d-40ef-b5b7-5ebc7db1d87d",
          "2b3efe5e-c7b9-44c5-a462-de84612447a6",
          "2456412c-1b24-6ad5-a062-9675797961c2",
          "e6145123-0b1b-f70d-fa9e-61d7f794e965",
          "ff64d11d-7cf0-5541-c2bb-c25bac7ce041",
          "b01d02c5-ecd7-a826-dd7e-54f1d380c923",
          "446bf4d2-13bf-0427-3fc3-0330dd59700c",
          "eaeac12f-690b-3e6e-54b8-aa48d47f565c",
          "390f7a19-8fc2-831b-1bd3-cd49b6ed885e",
          "f0a25de1-3dd0-5ba4-15cd-e7af12221c6f",
          "9ea3f390-cb70-30a4-03e7-a445a635477c",
          "e1416da3-a111-cfeb-0c7c-713b3deffda0",
          "5285349b-5606-9640-104f-9ae3dd65c1ca",
          "1d7e30db-1939-d080-72a5-802b754db412",
          "d0e7d832-f069-f138-5463-0c64c378a67d",
          "ec58c60a-cd91-9b13-78dd-53b81c16af3b",
          "70e6e297-d012-e44b-0858-d0cc3184581d",
          "78872b97-92f6-0244-1568-025c6af8b2d4",
          "8ea60849-a7b8-d6cb-8e02-767e0d214706",
          "385ffa71-5a4b-565d-f3e5-1e3a1d0d1701",
          "461fc969-bbcd-c8f3-716d-3505ac30d8c4",
          "c776f294-98b0-632f-1658-1cfc6f39d2cb",
          "65d4878e-48f6-0b17-cac5-bd6ee4b95da8",
          "2d6728ea-94d9-ee1f-5dc7-291cd4a9fcbc",
          "1ba0007f-d9ed-3f68-56f2-dfd3605424f9",
          "af896e1b-f48c-0d79-cb1e-f2b54ba3dff3",
          "e3535e1c-9992-e702-f257-b190f5a6b6d1"
      ],
      "profileId": "455013a9db236fe6",
      "x": 450,
      "y": 300,
      "wires": []
  },
  {
      "id": "eebb2821cb198b06",
      "type": "status-device",
      "z": "b1d0c8903999be6c",
      "name": "",
      "alias": "홈카메라 360",
      "deviceNodeId": "455013a9db236fe6",
      "deviceType": "installed-device",
      "deviceId": "c0a6fd54-bbae-4f75-a7d8-5dbea7785c52",
      "componentId": "",
      "capabilityId": "videoStream_v1",
      "attributeId": "stream",
      "rules": [],
      "logging": true,
      "loggingEditor": true,
      "loggingConsole": true,
      "outputs": 1,
      "x": 640,
      "y": 360,
      "wires": [
          [
              "78fdc1e6654b4eb1"
          ]
      ]
  },
  {
      "id": "a169685ab5b17536",
      "type": "websocket in",
      "z": "b1d0c8903999be6c",
      "name": "",
      "server": "e9b870a1bbf9569d",
      "client": "",
      "x": 460,
      "y": 720,
      "wires": [
          [
              "a69f0f289a480007"
          ]
      ]
  },
  {
      "id": "d217f2dca70cdafb",
      "type": "switch",
      "z": "b1d0c8903999be6c",
      "name": "",
      "property": "payload.regist",
      "propertyType": "msg",
      "rules": [
          {
              "t": "false"
          },
          {
              "t": "true"
          }
      ],
      "checkall": "true",
      "repair": false,
      "outputs": 2,
      "x": 840,
      "y": 720,
      "wires": [
          [
              "8d5124c5b116b31f"
          ],
          [
              "1d05642a60fe6120"
          ]
      ]
  },
  {
      "id": "a69f0f289a480007",
      "type": "json",
      "z": "b1d0c8903999be6c",
      "name": "",
      "property": "payload",
      "action": "",
      "pretty": false,
      "x": 650,
      "y": 720,
      "wires": [
          [
              "d217f2dca70cdafb"
          ]
      ]
  },
  {
      "id": "44827a202dfec303",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "Pose Similarity Function",
      "func": "// Now keypoints Data\nlet keypointsBuffer = flow.get('keypointsBuffer') || []\nconst bufferlength = 30\nkeypointsBuffer.push(msg.payload.poseLandmarks)\nif (keypointsBuffer.length > bufferlength) {\n        keypointsBuffer.shift()\n}\nflow.set('keypointsBuffer', keypointsBuffer)\n\n// Saved Keypoints Data\nconst registeredPoses = flow.get(\"registeredPoses\")\nlet savedKeypoints = {}\nfor (let i = 0; i < registeredPoses.length; i ++) {\n    savedKeypoints[registeredPoses[i].poseName] = registeredPoses[i].poseLandmarks\n}\n\nif (keypointsBuffer.length < bufferlength) {\n\n    msg.inputKeypoints = []\n    msg.savedKeypoints = savedKeypoints\n\n} else {\n\n    msg.inputKeypoints = keypointsBuffer\n    msg.savedKeypoints = savedKeypoints\n}\n\n\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1320,
      "y": 640,
      "wires": [
          [
              "b0f32472e7e71723"
          ]
      ]
  },
  {
      "id": "1d05642a60fe6120",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "Pose Register Function",
      "func": "const registeredPoses = flow.get(\"registeredPoses\")\nlet savedKeypoints = {}\nfor (let i = 0; i < registeredPoses.length; i ++) {\n    savedKeypoints[registeredPoses[i].poseName] = registeredPoses[i].poseLandmarks\n}\n\nmsg.inputData = msg.payload \n\n\nmsg.inputKeypoint = msg.payload.poseLandmarks\nmsg.savedKeypoints = savedKeypoints\n\n\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1080,
      "y": 780,
      "wires": [
          [
              "bee4b23fe052e090"
          ]
      ]
  },
  {
      "id": "9d1a24d1dda1822a",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "Buffer Reset",
      "func": "if (msg.status) {\n    flow.set('keypointsBuffer', [])\n}\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1780,
      "y": 640,
      "wires": [
          [
              "84f7248b3cc152fb"
          ]
      ]
  },
  {
      "id": "84f7248b3cc152fb",
      "type": "switch",
      "z": "b1d0c8903999be6c",
      "name": "",
      "property": "poseName",
      "propertyType": "msg",
      "rules": [
          {
              "t": "eq",
              "v": "up pose",
              "vt": "str"
          },
          {
              "t": "eq",
              "v": "down pose",
              "vt": "str"
          }
      ],
      "checkall": "true",
      "repair": false,
      "outputs": 2,
      "x": 1950,
      "y": 640,
      "wires": [
          [
              "64121f03f335a0da"
          ],
          [
              "660849cb79e09a3f"
          ]
      ]
  },
  {
      "id": "8d5124c5b116b31f",
      "type": "switch",
      "z": "b1d0c8903999be6c",
      "name": "",
      "property": "isRoutineStart",
      "propertyType": "flow",
      "rules": [
          {
              "t": "true"
          },
          {
              "t": "else"
          }
      ],
      "checkall": "true",
      "repair": false,
      "outputs": 2,
      "x": 1020,
      "y": 640,
      "wires": [
          [
              "44827a202dfec303"
          ],
          []
      ]
  },
  {
      "id": "660849cb79e09a3f",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "",
      "func": "flow.set(\"previousPose\",2)\n\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 2170,
      "y": 660,
      "wires": [
          [
              "8e6ded72153205e6"
          ]
      ]
  },
  {
      "id": "b79772418adf0dca",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "Data Preprocess",
      "func": "let registeredPoses = flow.get(\"registeredPoses\") || []\nregisteredPoses.push(msg.inputData)\nflow.set(\"registeredPoses\", registeredPoses)\n\nmsg.payload = msg.inputData\n    \nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1800,
      "y": 760,
      "wires": [
          [
              "189188a048891b7b"
          ]
      ]
  },
  {
      "id": "d09d1ff0707e5b1a",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "Error msg",
      "func": "if (msg.isAccurate) {\n    msg.error = msg.poseName + ' 자세와 유사합니다. 다시 등록 해주세요'\n} else {\n    msg.error = '자세가 정확하지 않습니다. 다시 등록 해주세요'\n}\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1790,
      "y": 820,
      "wires": [
          [
              "fe80e0dacbf962bc"
          ]
      ]
  },
  {
      "id": "189188a048891b7b",
      "type": "mongodb out",
      "z": "b1d0c8903999be6c",
      "mongodb": "1358ea9c6c074371",
      "name": "Pose Save",
      "collection": "bodytraining",
      "payonly": true,
      "upsert": false,
      "multi": false,
      "operation": "insert",
      "x": 2000,
      "y": 760,
      "wires": []
  },
  {
      "id": "fe80e0dacbf962bc",
      "type": "debug",
      "z": "b1d0c8903999be6c",
      "name": "msg.error",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "error",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 1970,
      "y": 820,
      "wires": []
  },
  {
      "id": "6261d48869359ef4",
      "type": "switch",
      "z": "b1d0c8903999be6c",
      "name": "",
      "property": "status",
      "propertyType": "msg",
      "rules": [
          {
              "t": "false"
          },
          {
              "t": "else"
          }
      ],
      "checkall": "true",
      "repair": false,
      "outputs": 2,
      "x": 1560,
      "y": 780,
      "wires": [
          [
              "b79772418adf0dca"
          ],
          [
              "d09d1ff0707e5b1a"
          ]
      ]
  },
  {
      "id": "8e6ded72153205e6",
      "type": "debug",
      "z": "b1d0c8903999be6c",
      "name": "",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "poseName",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 2370,
      "y": 660,
      "wires": []
  },
  {
      "id": "43a348c285c955eb",
      "type": "debug",
      "z": "b1d0c8903999be6c",
      "name": "",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "poseName",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 2370,
      "y": 620,
      "wires": []
  },
  {
      "id": "64121f03f335a0da",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "",
      "func": "let counting=flow.get(\"counting\")\nlet previousPose=flow.get(\"previousPose\")\n\nif (previousPose === 0) {\n    previousPose = 1\n    msg.results = '시작!' \n} else if (previousPose == 2) {\n    counting ++\n    msg.results = '${counting} 개'\n    previousPose = 1\n}\n\nflow.set(\"counting\",counting)\nflow.set(\"previousPose\",previousPose)\n\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 2170,
      "y": 620,
      "wires": [
          [
              "43a348c285c955eb"
          ]
      ]
  },
  {
      "id": "b0f32472e7e71723",
      "type": "pose-similarity-find",
      "z": "b1d0c8903999be6c",
      "name": "",
      "similarSensitivity": 80,
      "x": 1550,
      "y": 640,
      "wires": [
          [
              "9d1a24d1dda1822a"
          ]
      ]
  },
  {
      "id": "bee4b23fe052e090",
      "type": "pose-similarity-register",
      "z": "b1d0c8903999be6c",
      "name": "",
      "similarSensitivity": 80,
      "x": 1370,
      "y": 780,
      "wires": [
          [
              "6261d48869359ef4"
          ]
      ]
  },
  {
      "id": "6bc31c613b456a31",
      "type": "bixby out",
      "z": "b1d0c8903999be6c",
      "property": "output",
      "propertyType": "msg",
      "statusCode": 200,
      "x": 760,
      "y": 620,
      "wires": []
  },
  {
      "id": "20ad1f50da85daaa",
      "type": "bixby out",
      "z": "b1d0c8903999be6c",
      "property": "output",
      "propertyType": "msg",
      "statusCode": 200,
      "x": 760,
      "y": 560,
      "wires": []
  },
  {
      "id": "dc56fea75de184df",
      "type": "bixby out",
      "z": "b1d0c8903999be6c",
      "property": "output",
      "propertyType": "msg",
      "statusCode": 200,
      "x": 740,
      "y": 500,
      "wires": []
  },
  {
      "id": "56dfdbdf69e3c9ab",
      "type": "change",
      "z": "b1d0c8903999be6c",
      "name": "Initialize",
      "rules": [
          {
              "t": "delete",
              "p": "payload",
              "pt": "flow"
          },
          {
              "t": "delete",
              "p": "registeredPoses",
              "pt": "flow"
          }
      ],
      "action": "",
      "property": "",
      "from": "",
      "to": "",
      "reg": false,
      "x": 640,
      "y": 420,
      "wires": [
          [
              "675e81dadd34e9ce"
          ]
      ]
  },
  {
      "id": "c72f142f9ff1d8a1",
      "type": "function",
      "z": "b1d0c8903999be6c",
      "name": "Array Setting",
      "func": "flow.set(\"registeredPoses\", msg.payload || []);\nflow.set(\"goal\",10)\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.payload = [];",
      "finalize": "",
      "libs": [],
      "x": 1150,
      "y": 420,
      "wires": [
          [
              "398c88da3a78fe75"
          ]
      ]
  },
  {
      "id": "398c88da3a78fe75",
      "type": "debug",
      "z": "b1d0c8903999be6c",
      "name": "",
      "active": false,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "payload",
      "targetType": "msg",
      "statusVal": "",
      "statusType": "auto",
      "x": 1340,
      "y": 420,
      "wires": []
  },
  {
      "id": "675e81dadd34e9ce",
      "type": "mongodb in",
      "z": "b1d0c8903999be6c",
      "mongodb": "1358ea9c6c074371",
      "name": "Pose Load",
      "collection": "bodytraining",
      "operation": "find",
      "x": 810,
      "y": 420,
      "wires": [
          [
              "29f8347ceee968ff"
          ]
      ]
  },
  {
      "id": "29f8347ceee968ff",
      "type": "json",
      "z": "b1d0c8903999be6c",
      "name": "",
      "property": "payload",
      "action": "obj",
      "pretty": false,
      "x": 970,
      "y": 420,
      "wires": [
          [
              "c72f142f9ff1d8a1"
          ]
      ]
  },
  {
      "id": "1358ea9c6c074371",
      "type": "mongodb",
      "hostname": "127.0.0.1",
      "topology": "direct",
      "connectOptions": "",
      "port": "27017",
      "db": "5fn",
      "name": ""
  },
  {
      "id": "e9b870a1bbf9569d",
      "type": "websocket-listener",
      "path": "/ws/data",
      "wholemsg": "false"
  }
]